class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        res,l=100000,len(nums)
        a,b=0,0
        added=nums[0]
        
        if sum(nums)<target:
            return 0
            
        while(b<l):
            #print(a,b,added,res)
            if(added >= target):
                res=min(res,b-a+1)
                added-=nums[a]
                a+=1
            else:
                b+=1
                if(b<l):
                    added+=nums[b]
        return res



The outer while loop runs O(n) times because both pointers a and b can traverse the entire list once. Thus, the time complexity of the provided solution is 
O(n).








