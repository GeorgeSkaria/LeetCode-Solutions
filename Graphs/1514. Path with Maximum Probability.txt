class Solution:
    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start_node: int, end_node: int) -> float:
        adj = defaultdict(list)

        for i in range(len(edges)):
            s,d = edges[i]
            adj[s].append([d,succProb[i]])
            adj[d].append([s,succProb[i]])

        minheap = [(-1,start_node)]
        visited = set()

        while minheap:
            prob,node = heapq.heappop(minheap)
            visited.add(node)

            if node == end_node:
                return prob * -1

            for y,z in adj[node]:
                if y not in visited:
                    heapq.heappush(minheap,(prob*z,y))
        return 0

            
            



        