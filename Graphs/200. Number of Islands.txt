*One of the best application of BFS AND DFS

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        r,c=len(grid),len(grid[0])
        visited=set()
        res=0
        def bfs(i,j):
            q=collections.deque()
            visited.add((i,j))
            q.append((i,j))
            while q:
                row,col=q.popleft() #Using just pop() here makes this a dfs function.
                dir=[[1,0],[-1,0],[0,1],[0,-1]]
                for k,l in dir:
                    if -1<k+row<r and -1<l+col<c and grid[k+row][l+col]=="1" and (k+row,l+col) not in visited:
                        visited.add((k+row,l+col))
                        q.append((k+row,l+col))        

        for i in range(r):
            for j in range(c):
                if grid[i][j]=="1" and (i,j) not in visited:
                    bfs(i,j)
                    res+=1
        return res