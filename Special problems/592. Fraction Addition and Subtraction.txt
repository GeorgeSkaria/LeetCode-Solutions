class Solution:
    def fractionAddition(self, expression: str) -> str:
        i = 0
        l = len(expression)

        def calculate(n1,d1,n2,d2):
            lcm = (d1*d2)//gcd(d1,d2)
            new_n1 = (lcm//d1)*n1 + (lcm//d2)*n2

            divisor = gcd(abs(new_n1),lcm)
            new_n1 //= divisor
            new_d1 = lcm//divisor

            return str(new_n1),str(new_d1)

        n1,d1 = '',''
        if expression[i] in '+-':
            n1 += expression[i]
            i += 1
        while(expression[i] != '/'):
            n1 += expression[i]
            i += 1
        i += 1
        while(i<l and expression[i] not in '+-'):
            d1 += expression[i]
            i += 1

        while(i<l):
            n2,d2 = '',''
            if expression[i] in '+-':
                n2 += expression[i]
                i += 1
            while(i<l and expression[i] != '/'):
                n2 += expression[i]
                i += 1
            i += 1
            while(i<l and expression[i] not in '+-'):
                d2 += expression[i]
                i += 1
            n1,d1 = calculate(int(n1),int(d1),int(n2),int(d2))

        return (n1 + '/' + d1)

        

        
       


        