>It is a Complete Binary Tree

>Max Heap: Every node having element greater than its descendants
 Min Heap: Every node having element lesser than its descendants

>Duplicates are allowed

>INSERTION
 
 Element first inserted as last element of the array.
 Adjust it by comparing with the parent.
 As minimum height of CBT is log N, worst time complexity for the operation is O(log n) and best is O(1).

>DELETION
 
 Always occur from the root.
 It is replaced by the last element of array.
 Greater child of new root will replace it, for preserving property of maxheap. Continue
 downwards until the property gets satisfied.
 Time Complexity is O(log n). 

>HEAP SORT

 Free space in array after deletion can be used to store element for sorting purposes.
 Create heap and delete all elements from it, we get a sorted array as result.
 Heap Creation and Deletion for n elements both takes O(nlogn).

>HEAPIFY

 Here, creation of heap is by adjusting elements downwards.
 Consider elements in the array in reverse order.
 O(n), so better than earlier creation.

>PRIORITY QUEUE
 Implemented using Heaps.
 
 
 
 
 
 
  
 
 
 
 
 

 

  
 
 
