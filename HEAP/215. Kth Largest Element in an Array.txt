class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        heapq.heapify(nums)
        k=len(nums)+1-k
        for _ in range(k-1):
            heapq.heappop(nums)
        return heapq.heappop(nums)

        

#QUICKSELECT APPROACH

class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        #Quick Select
        k=len(nums)-k
        def Quickselect(l,r):
            pivot,p=nums[r],l
            for i in range(l,r):
                if nums[i]<=pivot:
                    nums[i],nums[p]=nums[p],nums[i]
                    p+=1
            nums[p],nums[r]=nums[r],nums[p]
            if p<k:
                return Quickselect(p+1,r)
            elif p>k:
                return Quickselect(l,p-1)
            else:
                return nums[p]
        return Quickselect(0,len(nums)-1)


> If you pick a static pivot, it has a possible worst case. To fix this, instead of picking the rightmost pivot, just pick a random pivot between l and r and then swap that with the right most pivot. 

        