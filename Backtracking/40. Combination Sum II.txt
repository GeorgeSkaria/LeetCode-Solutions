class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        res=[]
        candidates.sort()

        def dfs(path,val,i):
            if val==target:
                res.append(path.copy())
                return
            if val>target or i==len(candidates):
                return
            
            path.append(candidates[i])
            dfs(path,val+candidates[i],i+1)
            path.pop()

            while i+1<len(candidates) and candidates[i]==candidates[i+1]:
                i+=1
            dfs(path,val,i+1)
        dfs([],0,0)
        return res


        


#Sorting helps in efficiently skipping duplicates.
DFS explores all possible combinations.
Backtracking (using path.pop()) ensures that the function explores all paths without permanent changes to the path.
Handling duplicates with a while loop ensures that no repeated combinations are included in res.