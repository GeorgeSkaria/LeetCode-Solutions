>RECURSIVE APPROACH

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head is None or head.next is None:
            return head
        def rev(a,b):
            temp=b.next
            b.next=a
            if(temp is not None):
                return rev(b,temp)
            else:
                return b
        return rev(None,head) 
       

>ITERATIVE APPROACH

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head is None or head.next is None:
            return head
        prev,cur,aft=None,head,head.next
        while(aft is not None):
            cur.next=prev
            prev=cur
            cur=aft
            aft=aft.next
        cur.next=prev
        return cur
        